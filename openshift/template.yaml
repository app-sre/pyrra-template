---
apiVersion: v1
kind: Template
metadata:
  name: pyrra
objects:
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    name: pyrra-kubernetes
  rules:
  - apiGroups:
    - monitoring.coreos.com
    resources:
    - prometheusrules
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - monitoring.coreos.com
    resources:
    - prometheusrules/status
    verbs:
    - get
  - apiGroups:
    - pyrra.dev
    resources:
    - servicelevelobjectives
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - pyrra.dev
    resources:
    - servicelevelobjectives/status
    verbs:
    - get
    - patch
    - update
  - apiGroups: [""]
    resources:
    - configmaps
    verbs:
    - create
    - get
    - list
    - update
    - watch
    - patch
  - apiGroups: [""]
    resources:
    - namespaces
    verbs:
    - get
    - list
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      service.beta.openshift.io/inject-cabundle: "true"
    labels:
      app.kubernetes.io/name: pyrra-api
    name: pyrra-api
    namespace: pyrra
    # namespace: openshift-customer-monitoring
    # namespace: openshift-monitoring
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/name: pyrra-api
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        labels:
          app.kubernetes.io/name: pyrra-api
      spec:
        containers:
          - args:
            - api
            - --prometheus-url=${PROMETHEUS_URL}
            - --api-url=${API_URL}
            - --route-prefix=/api/v1/alerts
            # - --prometheus-bearer-token-path=$(PROM_TOKEN)
            # - --prometheus-bearer-token-path=/var/run/secrets/tokens/pyrra-kubernetes
            env:
            - name: PROM_TOKEN
              valueFrom:
                secretKeyRef:
                  name: app-sre-stage-01-pyrra-pyrra-kubernetes
                  key: token
            image: ${IMAGE_TEST}:${RELEASE_TEST}
            imagePullPolicy: IfNotPresent
            name: pyrra-api
            ports:
              - containerPort: 9099
                name: http
                protocol: TCP
            resources:
              limits:
                cpu: 100m
                memory: 30Mi
              requests:
                cpu: 100m
                memory: 20Mi
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
              - mountPath: /var/run/secrets/tokens
                name: pyrra-sa-token
                readOnly: true
              - mountPath: /etc/ssl/certs
                name: trusted-ca
                readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        serviceAccountName: pyrra-kubernetes
        volumes:
          - name: pyrra-sa-token
            projected:
              sources:
                - serviceAccountToken:
                    path: pyrra-kubernetes
          - configMap:
              defaultMode: 420
              items:
                - key: service-ca.crt
                  path: service-ca.crt
              name: openshift-service-ca.crt
            name: trusted-ca


- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    namespace: pyrra
    creationTimestamp: null
    name: prometheus-pyrra
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    namespace: pyrra
    creationTimestamp: null
    name: pyrra-filesystem-claim0
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    namespace: pyrra
    creationTimestamp: null
    name: pyrra-filesystem
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: pyrra-filesystem
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.network/pyrra: "true"
          io.kompose.service: pyrra-filesystem
      spec:
        containers:
        - args:
          - filesystem
          - --prometheus-url=${PROMETHEUS_URL}
          image: ${IMAGE_TEST}:${RELEASE_TEST}
          imagePullPolicy: IfNotPresent
          name: pyrra-filesystem
          resources: {}
          volumeMounts:
          - mountPath: /etc/pyrra
            name: pyrra-filesystem-claim0
          - mountPath: /etc/prometheus/pyrra
            name: prometheus-pyrra
        restartPolicy: Always
        serviceAccountName: pyrra-kubernetes
        volumes:
        - name: pyrra-filesystem-claim0
          persistentVolumeClaim:
            claimName: pyrra-filesystem-claim0
        - name: prometheus-pyrra
          persistentVolumeClaim:
            claimName: prometheus-pyrra
  status: {}
# - apiVersion: extensions/v1beta1
#   kind: NetworkPolicy
#   metadata:
#     creationTimestamp: null
#     name: pyrra
#     namespace: pyrra
#   spec:
#     ingress:
#     - from:
#       - podSelector:
#           matchLabels:
#             io.kompose.network/pyrra: "true"
#     podSelector:
#       matchLabels:
#         io.kompose.network/pyrra: "true"

- apiVersion: v1
  metadata:
    name: pyrra-kubernetes
    namespace: pyrra
    # namespace: openshift-customer-monitoring
    # namespace: openshift-monitoring
    labels:
      app.kubernetes.io/name: pyrra-kubernetes
  spec:
    ports:
    - name: internal
      port: 9443
    - name: api
      port: 9444
    selector:
      app.kubernetes.io/name: pyrra-kubernetes
  kind: Service
- apiVersion: apps/v1
  metadata:
    name: pyrra-kubernetes
    namespace: pyrra
    # namespace: openshift-customer-monitoring
    labels:
      app.kubernetes.io/name: pyrra-kubernetes
  spec:
    selector:
      matchLabels:
        app.kubernetes.io/name: pyrra-kubernetes
    replicas: 1
    template:
      metadata:
        labels:
          app.kubernetes.io/name: pyrra-kubernetes
      spec:
        serviceAccountName: pyrra-kubernetes
        containers:
        - args:
          - kubernetes
          - --prometheus-url=${PROMETHEUS_URL}
          image: ${IMAGE_TEST}:${RELEASE_TEST}
          name: pyrra-kubernetes
          resources:
            limits:
              cpu: 100m
              memory: 30Mi
            requests:
              cpu: 100m
              memory: 20Mi
  kind: Deployment

# - apiVersion: v1
#   metadata:
#     name: pyrra-kubernetes
#     namespace: pyrra
#     # namespace: openshift-customer-monitoring
#     # namespace: openshift-monitoring
#   kind: ServiceAccount
- apiVersion: rbac.authorization.k8s.io/v1
  metadata:
    name: pyrra-kubernetes
    namespace: pyrra
    # namespace: openshift-customer-monitoring
    # namespace: openshift-monitoring
  subjects:
  - kind: ServiceAccount
    name: pyrra-kubernetes
    namespace: pyrra
    # namespace: openshift-customer-monitoring
    # namespace: openshift-monitoring
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: pyrra-kubernetes
  kind: ClusterRoleBinding
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: cluster-monitoring-view
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: cluster-monitoring-view
  subjects:
    - kind: ServiceAccount
      name: pyrra-kubernetes
      namespace: pyrra
      # namespace: openshift-customer-monitoring
      # namespace: openshift-monitoring
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.8.0
    creationTimestamp: null
    name: servicelevelobjectives.pyrra.dev
  spec:
    group: pyrra.dev
    names:
      kind: ServiceLevelObjective
      listKind: ServiceLevelObjectiveList
      plural: servicelevelobjectives
      shortNames:
      - slo
      singular: servicelevelobjective
    scope: Namespaced
    versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: ServiceLevelObjective is the Schema for the ServiceLevelObjectives
            API.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this
                object represents. Servers may infer this from the endpoint the client
                submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: ServiceLevelObjectiveSpec defines the desired state of ServiceLevelObjective.
              properties:
                alerting:
                  description: Alerting customizes the alerting rules generated by Pyrra.
                  properties:
                    disabled:
                      description: Disabled is used to disable the generation of alerts.
                        Recording rules are still generated.
                      type: boolean
                    name:
                      description: Name is used as the name of the alert generated by
                        Pyrra. Defaults to "ErrorBudgetBurn".
                      type: string
                  type: object
                description:
                  description: Description describes the ServiceLevelObjective in more
                    detail and gives extra context for engineers that might not directly
                    work on the service.
                  type: string
                indicator:
                  description: ServiceLevelIndicator is the underlying data source that
                    indicates how the service is doing. This will be a Prometheus metric
                    with specific selectors for your service.
                  properties:
                    latency:
                      description: Latency is the indicator that measures a certain
                        percentage to be fast than.
                      properties:
                        grouping:
                          description: Grouping allows an SLO to be defined for many
                            SLI at once, like HTTP handlers for example.
                          items:
                            type: string
                          type: array
                        success:
                          description: Success is the metric that returns how many errors
                            there are.
                          properties:
                            metric:
                              type: string
                          required:
                          - metric
                          type: object
                        total:
                          description: Total is the metric that returns how many requests
                            there are in total.
                          properties:
                            metric:
                              type: string
                          required:
                          - metric
                          type: object
                      required:
                      - success
                      - total
                      type: object
                    ratio:
                      description: Ratio is the indicator that measures against errors
                        / total events.
                      properties:
                        errors:
                          description: Errors is the metric that returns how many errors
                            there are.
                          properties:
                            metric:
                              type: string
                          required:
                          - metric
                          type: object
                        grouping:
                          description: Grouping allows an SLO to be defined for many
                            SLI at once, like HTTP handlers for example.
                          items:
                            type: string
                          type: array
                        total:
                          description: Total is the metric that returns how many requests
                            there are in total.
                          properties:
                            metric:
                              type: string
                          required:
                          - metric
                          type: object
                      required:
                      - errors
                      - total
                      type: object
                  type: object
                target:
                  description: 'Target is a string that''s casted to a float64 between
                    0 - 100. It represents the desired availability of the service in
                    the given window. float64 are not supported: https://github.com/kubernetes-sigs/controller-tools/issues/245'
                  type: string
                window:
                  description: Window within which the Target is supposed to be kept.
                    Usually something like 1d, 7d or 28d.
                  type: string
              required:
              - indicator
              - target
              - window
              type: object
            status:
              description: ServiceLevelObjectiveStatus defines the observed state of
                ServiceLevelObjective.
              type: object
          type: object
      served: true
      storage: true
  status:
    acceptedNames:
      kind: ""
      plural: ""
    conditions: []
    storedVersions: []
- apiVersion: v1
  metadata:
    name: pyrra-api
    namespace: pyrra
    # namespace: openshift-customer-monitoring
    # namespace: openshift-monitoring
    labels:
      app.kubernetes.io/name: pyrra-api
  spec:
    ports:
    - name: http
      port: 9099
    selector:
      app.kubernetes.io/name: pyrra-api
  kind: Service
parameters:
- name: IMAGE
  value: ghcr.io/pyrra-dev/pyrra
- name: IMAGE_TEST
  value: ghcr.io/suzana-nesic/pyrra
- name: RELEASE
  value: v0.4.4
- name: RELEASE_TEST
  value: v0.0.2-test
- name: PROMETHEUS_URL
  value: https://localhost:9090
- name: API_URL
  value: localhost